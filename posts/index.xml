<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Welcome</title>
        <link>https://brian-heumann.github.io/posts/</link>
        <description>Recent content in Posts on Welcome</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>de-de</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 20 Jun 2021 12:57:30 +0200</lastBuildDate>
        <atom:link href="https://brian-heumann.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Amundsen vs Scott</title>
            <link>https://brian-heumann.github.io/posts/amundsen-vs-scott/</link>
            <pubDate>Sun, 20 Jun 2021 12:57:30 +0200</pubDate>
            
            <guid>https://brian-heumann.github.io/posts/amundsen-vs-scott/</guid>
            <description>Wie anstregend darf es denn sein? In der Folge #716 des Podcasts &amp;ldquo;Art of Manliness&amp;rdquo; von Brett McKay ging es darum, wie man die wichtigsten Ziele und Aufgaben seines Lebens so einfach wie möglich macht. Dabei wurde auch das Rennen zum Südpol zwischen Amundsen und Scott thematisiert, eines meines Lieblingsthemen!
Soerfm, CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0, via Wikimedia Commons
Steady, steady Sehr häufig dominiert noch die Haltung, das man für die wichtigen Dinge sehr hart und ausdauernd arbeiten muss.</description>
            <content type="html"><![CDATA[<h1 id="wie-anstregend-darf-es-denn-sein">Wie anstregend darf es denn sein?</h1>
<p>In der <a href="https://www.artofmanliness.com/articles/podcast-716-how-to-make-your-life-more-effortless/">Folge #716 des Podcasts &ldquo;Art of Manliness&rdquo;</a> von Brett McKay ging es darum, wie man die wichtigsten Ziele und Aufgaben seines Lebens so einfach wie möglich macht. Dabei wurde auch das Rennen zum Südpol zwischen Amundsen und Scott thematisiert, eines meines Lieblingsthemen!</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/Antarctic_expedition_map_%28Amundsen_-_Scott%29-en-crop.png" alt="Amundsens und Scotts Routen zum Südpol">
Soerfm, CC BY-SA 4.0 <a href="https://creativecommons.org/licenses/by-sa/4.0">https://creativecommons.org/licenses/by-sa/4.0</a>, via Wikimedia Commons</p>
<h2 id="steady-steady">Steady, steady</h2>
<p>Sehr häufig dominiert noch die Haltung, das man für die wichtigen Dinge sehr hart und ausdauernd arbeiten muss. Ich denke, das ist in manchen Fällen einfach wahr, aber für viele Fälle sollte man sich wirklich überlegen, ob man die Ergebnisse nicht viel einfacher und komfortabler ernten kann.</p>
<p>Im Podcast wurde unter anderem das Rennen von Amundsen versus Scott zum Südpol geschildert. Im Team Scott herrschte die Meinung vor, das man immer vorwärts streben sollte, so weit es nur ging. An guten und warmen Tagen konnte Scotts Team bis zu 40 Meilen an einem Tag zurücklegen. An schlechten Tagen hingegen nur wenige oder gar keine.</p>
<p>Amundsen und sein Team hingegen nahmen sich vor, nur 15 Meilen pro Tag zu schaffen, bei guten wie bei schlechten Wetter. Gegen Ende der Expedition waren sie nur ca. 40 Meilen vom Südpol entfernt. Anstatt die Strecke in einer großen aber machbaren Anstrengung in nur einem Tag zu überwinden, hielten sie an ihrem Prinzip fest: 15 Meilen pro Tag und nicht mehr oder weniger. 3 Tage später erreichten sie den Südpol im Dezember 1911, waren dabei relativ ausgeruht und erlitten keine Verluste. Viele der Beobachter und Wissenschaftler waren sich einig, das Amundsen und sein Team ihre Ziele fast ohne Mühe erreichten.</p>
<p>Scott und sein Team erreichten den Südpol einen Monat später im Januar 1912. Auf dem Rückweg verloren sie alle ihre Ponies, die der eisigen Kälte nicht standhielten. Weitere Fehler bei der Logistik, Ausrüstung usw. führten dann letztendlich zu Krankheit, Hunger und Erschöpfung. Keine 15 Meilen vom letzten, rettenden Stützpunkt entfernt, verstarben die letzten Männer. So erschöpft und am Ende ihrer Kräfte, vermochten sie die letzten 15 Meilen nicht mehr überwinden &ndash; eine Strecke, die zu Anfang so klein erschien!</p>
<h3 id="persönliche-erfahrung">Persönliche Erfahrung</h3>
<p>Aus meiner persönlichen Erfahrung kann ich diese Beobachtung nur teilen: kleine aber stetige Schritte können zu großen Ergebnissen führen. Zum Beispiel habe ich für meine Diplomprüfungen nur 4 Stunden am Tag gelernt, und das ca. 4 Monate vor den ersten Terminen. Andere Kommilitonen hingen fingen 2-4 Wochen vorher an, dafür aber mit 10 oder mehr Stunden pro Tag. Das galt als die übliche Heransgehenweise.</p>
<p>Ich denke, wenn wir das Integral des Aufwands über die Zeit nehmen, dann haben beide Vorgehen ein ähnliches Ergebnis. Aber auf dem Weg gab es enorme Unterschiede:</p>
<ul>
<li>Ich musste die Voraussicht und die Disziplin aufwenden, so viel früher mit meinen Vorbereitungen anzufangen. Manche schüttelten darüber den Kopf.</li>
<li>Die 4 Stunden pro Tag waren sehr einfach zu bewältigen. Und ich hatte sehr viel Freizeit für meinen Sport.</li>
<li>Wenn mal ein Tag ausfiel, wegen Krankheit, oder anderen Terminen, dann fielen &ldquo;nur&rdquo; 4 Stunden aus, die ich leicht an einem anderen Tag kompensieren konnte (auch wenn ich hier vom Prinzip abwich). Die Kommilitonen verloren hier gleich 10+ Stunden, eine Kompensation war nur schwer oder gar nicht möglich.</li>
<li>Für mich fühlte sich das Diplom relativ einfach an (ganz anders als mein Vordiplom, das ich mit der &ldquo;üblichen&rdquo; Herangehensweise sehr anstrengend fand).</li>
</ul>
<p>Ähnliche Effekte habe ich mit diesem Ansatz im Beruf, im Krafttraining erlebt, und in vielen anderen Bereichen.</p>
<h2 id="was-nehme-ich-mit">Was nehme ich mit?</h2>
<ol>
<li>Finde heraus, wie man die wichtigen Dinge im Leben möglichst ohne Mühen erreichen kann.</li>
<li>Work smarter, not harder - wo es nur geht.</li>
<li>Es mag nicht üblich oder normal sein - so what?!</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>TDD &amp; Clean Architecture</title>
            <link>https://brian-heumann.github.io/posts/tdd-clean-architecture/</link>
            <pubDate>Thu, 31 Dec 2020 19:05:43 +0100</pubDate>
            
            <guid>https://brian-heumann.github.io/posts/tdd-clean-architecture/</guid>
            <description>Ich stieß über den Kurs von Matt Rešetár (Reso Coder Labs), welcher die Themen Test Driven Development, Clean Architecture und Flutter behandelt &amp;ndash; alles Themen und Inhalte, die ich für wichtig und richtig finde, und für meine IOT Projekte anwende.
Übersicht Anhand einer Referenzarchitektur nach den Prinzipien von Clean Architecture führt Matt durch eine Serie von Videos und Artikeln durch eine konkrete Implementierung einer Flutter App. Mit dieser App können die Benutzer Informationen zu bestimmten Zahlen von einer REST API im Web einholen und anzeigen lassen.</description>
            <content type="html"><![CDATA[<p>Ich stieß über den Kurs von Matt Rešetár (Reso Coder Labs), welcher die Themen Test Driven Development, Clean Architecture und Flutter behandelt &ndash; alles Themen und Inhalte, die ich für wichtig und richtig finde, und  für meine IOT Projekte anwende.</p>
<h2 id="übersicht">Übersicht</h2>
<p>Anhand einer Referenzarchitektur nach den Prinzipien von Clean Architecture führt Matt durch eine Serie von Videos und Artikeln durch eine konkrete Implementierung einer Flutter App. Mit dieser App können die Benutzer Informationen zu bestimmten Zahlen von einer REST API im Web einholen und anzeigen lassen. Die App ist nicht mit Features und Besonderheiten überladen, aber komplex genug, um wesentliche Muster für Apps und ihr Zusammenspiel mit verschiedenen Datenquellen zu zeigen.</p>
<h2 id="architekturebenen">Architekturebenen</h2>
<p>Grob gesagt teilt das Tutorial die Architektur in 3 Ebenen auf:</p>
<ul>
<li>Domäne</li>
<li>Daten</li>
<li>User Interface</li>
</ul>
<p><img src="/CleanArchitectureOverview.png" alt="Architecture Overview"></p>
<p>Auf dieser Ebene und in jeder Ebene selbst verfolgt Reso einen Middle-Out Ansatz: Ausgehend von der Domäne und ihren Entitäten entwickelt er zunächst in Richtung des Data Layers die Repositories. Dabei enthält die Domäne nur deren Interfaces, während der Data Layer die Implementierungen derselben enthält. Dadurch werden die Repositories mit ihrer Technolgie etc. austauschbar. Mit Hilfe von <code>Mockito</code> kann man die Interfaces relativ leicht mocken und so Ebene für Ebene die zugehörigen Unit Tests schreiben. Im Verlauf des Projekt entsteht so eine Test Suite mit einer guten Abdeckung der Business Logik.</p>
<h2 id="exception-vs-return-objekte">Exception vs. Return Objekte</h2>
<p>In der Architektur werden im Data Layer unter Umständen Exceptions geworfen. Diese werden allesamt gefangen und dafür eigene Exceptions geworfen. Auf der Domänen Ebene werden diese Custom Exceptions gefangen und in Return Objekten verpackt. Diese werden dann an das User Interface übergeben und entsprechend visualisiert. Damit ist das Fehlerhandling sehr definiert und artet nicht gleich in Wildwuschs aus.</p>
<p>Für die Rückgabeobjekte werden Futures verwendet, und um die Fehlerobjekte mit einzupacken führt Reso die funktionale Library <code>dartz</code> ein. Mit dem Konstrukt <code>Either</code> kann die App  entweder ein Future mit dem Ergebnis zurückliefern oder ein Fehlerobjekt mit weiteren Details zum eigentlichen Fehler. Anfangs war das Handling mit diesem Konstrukt etwas ungewohnt, aber man gewöhnte sich schnell daran, auch weil man viele Unit Tests schrieb und so die API und den Umgang schnell lernte.</p>
<p>Insgesamt kann ich den Kurs nur empfehlen, ich habe sehr viel praktische Erfahrung mit den verschiedenen Prinzipien in kurzer Zeit gesammelt! Und mit einer solchen klaren Architektur weiß ich auch immer genau, wo und wie ich welchen neuen Features oder Erweiterungen einführe und teste.</p>
<h2 id="referenzen">Referenzen</h2>
<ul>
<li><a href="https://resocoder.com/2019/08/27/flutter-tdd-clean-architecture-course-1-explanation-project-structure/#t-1610012613931">Flutter TDD Clean Architecture Course pt. 1</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Testing Dart Exceptions &amp; Errors</title>
            <link>https://brian-heumann.github.io/posts/testing-dart-exceptions/</link>
            <pubDate>Sat, 12 Dec 2020 18:10:12 +0100</pubDate>
            
            <guid>https://brian-heumann.github.io/posts/testing-dart-exceptions/</guid>
            <description>Beim Unit Testing sollte man auch die (bekannten) Ausnahmesituationen testen, z.B. wenn Parameter einer Methode in einem Wertebereich liegen müssen, der Aufrufer aber Werte ausserhalb desselben übergeben kann.
Beispiel mit Dart In Dart habe ich ein Modell namens WeeklyInterval entworfen, das eine Map für die Wochentage und ihren Status (true/false) enthält. Mit der Methode set(int day, bool value) kann der Aufrufer bestimmen, ob der Wochentag wiederholt werden soll oder nicht.</description>
            <content type="html"><![CDATA[<p><img src="/dart-unit-test.png" alt="Dart Unit Test"></p>
<p>Beim Unit Testing sollte man auch die (bekannten) Ausnahmesituationen testen, z.B. wenn Parameter einer Methode in einem Wertebereich liegen müssen, der Aufrufer aber Werte ausserhalb desselben übergeben kann.</p>
<h2 id="beispiel-mit-dart">Beispiel mit Dart</h2>
<p>In Dart habe ich ein Modell namens <code>WeeklyInterval</code> entworfen, das eine <code>Map</code> für die Wochentage und ihren Status (<code>true/false</code>) enthält. Mit der Methode <code>set(int day, bool value)</code> kann der Aufrufer bestimmen, ob der Wochentag wiederholt werden soll oder nicht.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">WeeklyInterval</span> <span style="color:#66d9ef">extends</span> Interval {
  Map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">bool</span><span style="color:#f92672">&gt;</span> days <span style="color:#f92672">=</span> {
    DateTime.monday: <span style="color:#66d9ef">false</span>,
    DateTime.tuesday: <span style="color:#66d9ef">false</span>,
    DateTime.wednesday: <span style="color:#66d9ef">false</span>,
    DateTime.thursday: <span style="color:#66d9ef">false</span>,
    DateTime.friday: <span style="color:#66d9ef">false</span>,
    DateTime.saturday: <span style="color:#66d9ef">false</span>,
    DateTime.sunday: <span style="color:#66d9ef">false</span>
  };

  WeeklyInterval();

  <span style="color:#66d9ef">void</span> <span style="color:#66d9ef">set</span>(<span style="color:#66d9ef">int</span> day, <span style="color:#66d9ef">bool</span> value) {
    <span style="color:#66d9ef">assert</span>(DateTime.monday <span style="color:#f92672">&lt;=</span> day <span style="color:#f92672">&amp;&amp;</span> day <span style="color:#f92672">&lt;=</span> DateTime.sunday);
    <span style="color:#66d9ef">this</span>.days[day] <span style="color:#f92672">=</span> value;
  }
}
</code></pre></div><p>Mittels <code>assert</code> kann ich zur Laufzeit angeben, ob der Wertebereich für den Parameter <code>day</code> verletzt wird.</p>
<h2 id="unit-test">Unit test</h2>
<p>Diese Fall möchte ich auch explizit testen. Dafür verwende ich folgenden Unit Test:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart">[...]
  test(<span style="color:#e6db74">&#34;Set an incorrect date&#34;</span>, () {
    WeeklyInterval interval <span style="color:#f92672">=</span> WeeklyInterval();
    expect(() <span style="color:#f92672">=&gt;</span> interval.<span style="color:#66d9ef">set</span>(<span style="color:#ae81ff">8</span>, <span style="color:#66d9ef">true</span>), throwsAssertionError);
  });
[...]
</code></pre></div><p>Mit <code>() =&gt; interval.set(8, true)</code> weise ich <code>expect</code> an, diese Funktion mit einem Parameter ausserhalb des erwarteten Wertbereichs aufzurufen. Mit dem Matcher throwsAssertError gebe ich an, das <code>expect</code> einen entsprechenden Fehler erwartet. Tritt dieser Fehler nicht auf, dann schlägt expect und damit der Test fehl.</p>
<p>Mit <code>throwsA(TypeMatcher&lt;your-exception-here&gt;)</code> kann <code>expect</code> prüfen, ob bestimmte Ausnahmen geworfen werden.</p>
<h3 id="update">Update</h3>
<p><code>throwsA</code> is seit Flutter Version 1.12.1 deprecated. Nunmehr kann man mit dem Ausdruck <code>throwsA(isA&lt;your-exception&gt;())</code> prüfen, ob <code>your-exception</code> geworfen wurde.</p>
<h2 id="referenzen">Referenzen</h2>
<ul>
<li><a href="https://pub.dev/packages/test">Dart Unit Test package</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Cronjobs und Container</title>
            <link>https://brian-heumann.github.io/posts/cronjobs-and-containers/</link>
            <pubDate>Fri, 20 Nov 2020 17:47:53 +0100</pubDate>
            
            <guid>https://brian-heumann.github.io/posts/cronjobs-and-containers/</guid>
            <description>Für zeitgesteuerte Aufgaben ist der Cron Daemon auf dem Raspberry Pi immer eine gute Wahl. So möchte ich, das meine Raspberry Pis regelmässig einen Health Report an einen zentralen Server melden. Damit erhalte ich an einer Stelle die Einsicht, wie es meinen Geräten eigentlich so geht. Für diesen Bericht schreibe ich ein Python Script, das den Zustand von Speicher und Disk Space ausliest und diese Daten per HTTP POST Request alle 10 Minuten versendet.</description>
            <content type="html"><![CDATA[<p><img src="/cronjobs-on-time.jpg" alt="Cron Jobs in time"></p>
<p>Für zeitgesteuerte Aufgaben ist der Cron Daemon auf dem Raspberry Pi immer eine gute Wahl. So möchte ich, das meine Raspberry Pis regelmässig einen Health Report an einen zentralen Server melden. Damit erhalte ich an einer Stelle die Einsicht, wie es meinen Geräten eigentlich so geht. Für diesen Bericht schreibe ich ein Python Script, das den Zustand von Speicher und Disk Space ausliest und diese Daten per HTTP POST Request alle 10 Minuten versendet. Damit diese Aufgabe pünktlich erledigt wird, verwende ich den Cron Daemon (<code>crond</code>).</p>
<hr>
<h2 id="variante-1-cron-jobs-im-container">Variante #1: Cron Jobs im Container</h2>
<p>Eine Möglich besteht darin, den Cron-Job im Container einzutragen. Der Cron Daemon im Container ist dann zuständig, die Einträge in der cron Tabelle (<code>crontab</code>) zu verarbeiten.</p>
<p>Wir erzeugen in unserem Projekt die <code>crontab</code> Datei:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">0,10,20,30,40,50 * * * * python /device-reporter/main.py
<span style="color:#75715e"># crontab requires an empty line at the end of the file</span>
</code></pre></div><h4 id="dockerfile">Dockerfile:</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Docker" data-lang="Docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> arm32v7/python:3.7-slim-buster</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Update sytem, install requisites, Python </span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># and create &amp; activate virtual environment for my project</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#f92672">&amp;&amp;</span> apt-get install build-essential -y <span style="color:#f92672">&amp;&amp;</span> python3 -m venv /device-reporter/venv <span style="color:#f92672">&amp;&amp;</span> chmod +x /device-reporter/venv/bin/activate <span style="color:#f92672">&amp;&amp;</span> /device-reporter/venv/bin/activate <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install project dependencies </span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> requirements.txt /device-reporter/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /device-reporter/ </span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install -r requirements.txt <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Copy my Python source to the target directory</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./ /device-reporter/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./devicereporter /device-reporter/devicereporter<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Copy the crontab with my cron job definition</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./crontab /etc/cron/crontab<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Initialize the cron table on my Pi</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> crontab /etc/cron/crontab<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Now run the cron daemon (in the foreground -&gt; &#34;-f&#34;)</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;crond&#34;</span>, <span style="color:#e6db74">&#34;-f&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Jetzt können wir den Container bauen und ausführen:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker image build -t cron-device-reporter:latest
docker container run -d --rm cron-device-reporter:latest
</code></pre></div><p>Und nach einer Weil kann ich auf meinen zentralen Server prüfen, ob die Post Requests mit den entsprechenden Daten eintreffen.</p>
<hr>
<h2 id="variante-2-cron-jobs-auf-dem-host">Variante #2: Cron Jobs auf dem Host</h2>
<p>Ein anderer Weg für die pünktliche Ausführung von Cron-Jobs, ist der Crond Daemon des Hosts (d.h. des Raspberry Pis) zu verwenden. Hierfür fügen wir den Eintrag zur Cron-Tabelle des Betriebssystems hinzu, um den Container mit dem Python Script auszuführen.</p>
<p>Wir passen das Dockerfile so an, das es das Python Script direkt ausgeführt wird. Das Skript beendet sich von selbst, und damit endet anschließend der Container.</p>
<h4 id="dockerfile-1">Dockerfile:</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> arm32v7/python:3.7-slim-buster</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Update sytem, install requisites, Python </span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># and create &amp; activate virtual environment for my project</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#f92672">&amp;&amp;</span> apt-get install build-essential -y <span style="color:#f92672">&amp;&amp;</span> python3 -m venv /device-reporter/venv <span style="color:#f92672">&amp;&amp;</span> chmod +x /device-reporter/venv/bin/activate <span style="color:#f92672">&amp;&amp;</span> /device-reporter/venv/bin/activate <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install project dependencies </span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> requirements.txt /device-reporter/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /device-reporter/ </span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install -r requirements.txt <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Copy my Python source to the target directory</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./ /device-reporter/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> ./devicereporter /device-reporter/devicereporter<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> python /device-reporter/main.py <span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Danach wieder den Container bauen:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker build -t cron-device-reporter:latest
</code></pre></div><p>Und auf den Raspberry Pi verschieben (per Copy oder per Hub).</p>
<p>Danach starten wir den crontab Editor des Systems:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pi@raspberrypi:~ $ crontab -e

</code></pre></div><p>Und fügen folgende Zeile hinzu:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">0,10,20,30,40,50 * * * * docker run -rm cron-device-reporter:latest
</code></pre></div><blockquote>
<p>Bitte daran denken, das bereits ausgeführte Container wieder entfernt werden, sonst platzt die Festplatte/Disk des Raspberry Pi bald aus allen Nähten! Dafür verwenden wir die Option <code>--rm</code> (remove) damit der ausgeführte Container automatisch entfernt wird.</p>
</blockquote>
<h4 id="beispiel-der-crontab">Beispiel der crontab:</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Each task to run has to be defined through a single line</span>
<span style="color:#75715e"># indicating with different fields when the task will be run</span>
<span style="color:#75715e"># and what command to run for the task</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># To define the time you can provide concrete values for</span>
<span style="color:#75715e"># minute (m), hour (h), day of month (dom), month (mon),</span>
<span style="color:#75715e"># and day of week (dow) or use &#39;*&#39; in these fields (for &#39;any&#39;).#</span>
<span style="color:#75715e"># Notice that tasks will be started based on the cron&#39;s system</span>
<span style="color:#75715e"># daemon&#39;s notion of time and timezones.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Output of the crontab jobs (including errors) is sent through</span>
<span style="color:#75715e"># email to the user the crontab file belongs to (unless redirected).</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># For example, you can run a backup of all your user accounts</span>
<span style="color:#75715e"># at 5 a.m every week with:</span>
<span style="color:#75715e"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># For more information see the manual pages of crontab(5) and cron(8)</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># m h  dom mon dow   command</span>
0,10,20,30,40,50 * * * * docker run -rm cron-device-reporter:latest

</code></pre></div><p>Und das war&rsquo;s &ndash; jetzt noch abwarten, ob die HTTP Requests auf dem Server eintreffen&hellip;</p>
<hr>
<h2 id="links">Links</h2>
<ol>
<li><a href="https://crontab.guru/">crontab guru</a> - A quick and simple editor for cron schedule expression by Cronitor.</li>
<li><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile Reference</a> - Dockerfile Dokumentation mit der Erklärung aller Ausdrücke.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Neue Webseite</title>
            <link>https://brian-heumann.github.io/posts/new-website/</link>
            <pubDate>Tue, 17 Nov 2020 11:35:50 +0100</pubDate>
            
            <guid>https://brian-heumann.github.io/posts/new-website/</guid>
            <description>Nach langer Zeit habe ich mich enschieden, wieder eine eigene Website zu erstellen und pflegen. Im Gegensatz zu den vorherigen Versuchen, will ich dieses Mal ein minimales Design verwenden und mit nur geringen Pflegeaufwänden betreiben.
Als Tech-stack habe ich den Hugo Static Website Generator gewählt. Mit nur geringem Aufwand kann ich Themes einbinden, Inhalte erstellen und mit Github Pages verbinden.</description>
            <content type="html"><![CDATA[<p><img src="/new-website-sketch.jpg" alt="New Website Sketch"></p>
<p>Nach langer Zeit habe ich mich enschieden, wieder eine eigene Website zu erstellen und pflegen. Im Gegensatz zu den vorherigen Versuchen, will ich dieses Mal ein minimales Design verwenden und mit nur geringen Pflegeaufwänden betreiben.</p>
<p>Als Tech-stack habe ich den <a href="https://gohugo.io/">Hugo Static Website Generator</a> gewählt. Mit nur geringem Aufwand kann ich Themes einbinden, Inhalte erstellen und mit Github Pages verbinden.</p>
]]></content>
        </item>
        
    </channel>
</rss>
